[
    {
        "id": "3RurTP",
        "publisher_pic": "https://res.cloudinary.com/practicaldev/image/fetch/s--eYtZSTUn--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/770056/06feb277-54f5-482f-be53-0a26057b1957.jpg",
        "publisher_name": "Kuldeep Tarapara",
        "publish_date": "Published on Nov 22",
        "article_banner": "https://res.cloudinary.com/practicaldev/image/fetch/s--TqG7Vmrl--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1vo5s4kier577tub91b.jpg",
        "article_title": "How to Add Assets in Development Mode in Flutter?",
        "article_content": "<p>\n Do you want to know how to include the assets in Flutter? Then, here is the answer. With the help of the assets, you can add images and much more to your application. These images are considered assets, and it is selected from the definitive directory. Hence, the files added with the web apps are identified under an assets subcategory of a portable UI toolkit section.\n</p>\n<p>\n There are different assets such as configuration files, static data, images, icons, and much more. For example, images include GIF, PNG, WBMP, JPEG, BMP, etc. That\u2019s why in this post, we\u2019ll see a step-by-step process to add assets in development mode during the custom mobile app development. We also see thorough information about assets.\n</p>\n<h2>\n <a href=\"#what-is-determining-assets\" name=\"what-is-determining-assets\">\n </a>\n What is determining assets?\n</h2>\n<p>\n The open-source framework uses the pubspec.yaml file and located at the app development project root to find the asset your application needs.\n</p>\n<p>\n Example:\n <br/>\n flutter:\n <br/>\n assets:\n <br/>\n - assets/my_icon.png\n <br/>\n - assets/background.png\n</p>\n<p>\n The developer needs to identify the directory\u2019s name through / character at the end to comprise all resources in the directory.\n</p>\n<p>\n What are assets variants?\n <br/>\n App development procedure supports asset variants concept, and several asset versions may display in various contexts. When the pathway of the asset is specified in the pubspec.yaml assets section, all file names are the same in an adjacent subdirectory in the building practice. Then, files are included in the asset package with recognized assets.\n</p>\n<p>\n Consider these files in an application directory:\n</p>\n<p>\n .../pubspec.yaml\n <br/>\n .../graphics/my_icon.png\n <br/>\n .../graphics/background.png\n <br/>\n .../graphics/dark/background.png\n <br/>\n ...etc.\n</p>\n<p>\n After that, the pubspec.yaml file consists of the following:\n</p>\n<p>\n flutter:\n <br/>\n assets:\n <br/>\n - graphics/background.png\n</p>\n<p>\n The graphics/dark/background.png and graphics/background.png are included in the bundle of assets. As for the former, it is measured as a key asset and the latter as a variant. Specify the definitive directory as follows:\n</p>\n<p>\n flutter:\n <br/>\n assets:\n <br/>\n - graphics/\n</p>\n<p>\n The graphics/my_icon.png, graphics/dark/background.png, and graphics/background.png files include.\n</p>\n<p>\n If the developer selects the resolution-app images, Flutter uses asset variations. It extends to add variants for various areas and read directions in the future.\n</p>\n<h2>\n <a href=\"#what-are-asset-bundles\" name=\"what-are-asset-bundles\">\n </a>\n What are asset bundles?\n</h2>\n<p>\n Files included with the web application are listed under the Assets subcategory of the portable UI toolkit section. All assets qualified to the pubspec.yam1 file where asset files are positioned is recognized by explicit paths. It does not matter which type of asset is declared. Flutter locates assets into the exclusive archive during the development known as the assets bundle. Therefore the application reads from the runtime.\n</p>\n<h2>\n <a href=\"#what-are-the-loading-assets\" name=\"what-are-the-loading-assets\">\n </a>\n What are the loading assets?\n</h2>\n<p>\n The application can access its Flutter assets through the object of AssetBundle. The development team can load the string or text asset (image/binary asset (load ()) and (loadString()). An asset footpath was identified in pubspec.yam1 at construct time corresponding to the logical key sketch.\n</p>\n<h2>\n <a href=\"#what-are-the-loading-text-assets\" name=\"what-are-the-loading-text-assets\">\n </a>\n What are the loading text assets?\n</h2>\n<p>\n All Flutter applications have a rootBundle purpose for hassle-free access to an important asset bundle. With the help of rootBundle worldwide static from the package: flutter/services.dart, it loads assets straightforwardly. If you need to get AssetBundle for the present BuildContext, you can use DefaultAssetBundle rather than default asset bundles. This is because some default bundles are developed with a Flutter web application development.\n</p>\n<p>\n This method lets the parental widget substitute various AssetBundle at the run time, which is helpful for testing situations. In addition, the developer will utilize DefaultAssetBundle. of () to load assets circuitously. For example, JSON files from the runtime rootBundle of an application. The expert can utilize rootBundle to load the asset sincerely in the top Flutter widget context exterior.\n <br/>\n</p>\n<h2>\n <a href=\"#what-is-package-asset-bundling\" name=\"what-is-package-asset-bundling\">\n </a>\n What is package asset bundling?\n</h2>\n<p>\n It is bundled mechanically with the app when specific assets are identified in the package pubspec.yaml. Besides, the package\u2019s Flutter asset should be recognized in its pubspec.yaml. You can pick the useful Flutter package with an asset in the lib/ file, which doesn\u2019t identify in its pubspec.yam1. Files in the package fancy_backgrounds could include:\n</p>\n<p>\n .../lib/backgrounds/background1.png\n <br/>\n .../lib/backgrounds/background2.png\n <br/>\n .../lib/backgrounds/background3.png\n</p>\n<p>\n In addition, the application pubspec.yaml needs to identify it in the flutter asset section.\n</p>\n<p>\n flutter:\n <br/>\n assets:\n <br/>\n - packages/fancy_backgrounds/backgrounds/background1.png\n <br/>\n The lib/ implies; therefore, it does not include the asset\u2019s pathway. When building the package to load a unique asset, identify it in the set pubspec.yaml.\n <br/>\n</p>\n<h2>\n <a href=\"#how-to-use-the-fundamental-platform-to-share-assets\" name=\"how-to-use-the-fundamental-platform-to-share-assets\">\n </a>\n How to use the fundamental platform to share assets?\n</h2>\n<p>\n The Flutter asset is available to platform code with the NSBundle on the iOS app and AssetManage on Android. Let\u2019s see how to load assets in iOS and Android.\n</p>\n<h2>\n <a href=\"#how-to-load-assets-in-ios\" name=\"how-to-load-assets-in-ios\">\n </a>\n How to load assets in iOS?\n</h2>\n<p>\n Through the mainBundle, the Flutter asset is available on iOS. Lookup keys are used in pathForResource: ofType:, which gets from lookupKeyForAsset:fromPackage: on FlutterViewController or lookupKeyForAsset on FlutterPluginRegistrar. While creating plugins, you can find FlutterPluginRegistrar which offers the best result. FlutterViewController is the best option for building the app with a platform view.\n</p>\n<p>\n Use the following script to access icons/heart.png from your plugin code\n <br/>\n</p>\n<p>\n Pub.dev\u2019siOS_platform_images plugin handles this logic easily. The Flutter developer can create as below:\n</p>\n<p>\n Objective-C \u2013 [UIImageflutterImageWithName:@\u201dicons/heart.png\u201d];\n</p>\n<p>\n Swift \u2013 UIImage.flutterImageNamed(\u201cicons/heart.png\u201d)\n</p>\n<h2>\n <a href=\"#how-to-load-assets-in-android\" name=\"how-to-load-assets-in-android\">\n </a>\n How to load assets in Android?\n</h2>\n<p>\n Flutter assets are available in the AssetManager API on the Android platform. Lookup key used in openFd that gets from the lookupkeyForAsset on PluginRegistry.Registrar.\n</p>\n<p>\n Using PluginRegistry.Registrar is perfect for creating plugins. In addition, FlutterView is the best choice if you need to develop an application with a platform view. Let\u2019s say pubspec.yaml includes the following parameters:\n <br/>\n</p>\n<p>\n Use the following code to fetch icons/heart.png from the Java source code:\n <br/>\n</p>\n<p>\n Example:\n <br/>\n</p>\n<h2>\n <a href=\"#output\" name=\"output\">\n </a>\n Output:\n</h2>\n<p>\n <a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--EV6r4toB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a7s8xxz514s0whfidfe.jpg\">\n  <img alt=\"Image description\" height=\"512\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--EV6r4toB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a7s8xxz514s0whfidfe.jpg\" width=\"230\"/>\n </a>\n</p>\n<h2>\n <a href=\"#conclusion\" name=\"conclusion\">\n </a>\n Conclusion\n</h2>\n<p>\n So, it\u2019s all about adding assets. In this article, we\u2019ve covered information about assets and asset bundles in brief. There we learned about asset loading. Then, we\u2019ve seen the complete process of loading assets in the android platform as well as the iOS platform. So, far we learned how to add assets in development mode in Flutter. I hope, I\u2019ve covered all the information on this topic in the article. Thanks for reading or if you have any doubts let us know in the comment section. We are always happy to help.\n</p>\n<p>\n If you are looking for consultation on adding the assets in the development mode in Flutter. As a leading Flutter app development company, we can help you in adding assets and loading assets on iOS and android platforms.\n</p>\n<h2>\n <a href=\"#frequently-asked-questions-faqs\" name=\"frequently-asked-questions-faqs\">\n </a>\n Frequently Asked Questions (FAQs)\n</h2>\n<p>\n <strong>\n  1. How can you add all assets in Flutter development?\n </strong>\n</p>\n<p>\n It is at the root of your Flutter project. You can even give the name whatever you want, but the assets are preferred. If you wish to also include other assets into your app, such as the fonts, then making another subfolder name as images is preferred.\n</p>\n<p>\n <strong>\n  2. How can I add the library to Flutter?\n </strong>\n</p>\n<p>\n You can go into the pubspec.yaml file and can add the dependencies, and the packages will get to do the work. Else, you can run the flutter pub in the terminal.\n</p>\n<p>\n <strong>\n  3. What is the asset bundle in Flutter app development?\n </strong>\n</p>\n<p>\n Asset bundles consist of the resources like images and strings that an app can use. Access to these resources is asynchronous as it can transparently load over the network or from a local file without blocking an app\u2019s user interface.\n</p>\n",
        "likes": 187,
        "tag": "Resources"
    },
    {
        "id": "feBcmZ",
        "publisher_pic": "https://res.cloudinary.com/practicaldev/image/fetch/s--kx7JA7If--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/888582/e99d97d5-c77a-48bb-b656-2037b4231c55.jpg",
        "publisher_name": "Darshan",
        "publish_date": "Published on Nov 18",
        "article_banner": "https://res.cloudinary.com/practicaldev/image/fetch/s--561qyaOy--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0lo1ye2q2lrkaa947sv.png",
        "article_title": "Scrape Google Jobs Results",
        "article_content": "<p>\n This tutorial will teach us to scrape Google Jobs Results with Node JS. This article covers everything important you need to know.\n</p>\n<p>\n <a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--LXA074SV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x59klwyrdb6hswzlvwd.png\">\n  <img alt=\"Image description\" height=\"495\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--LXA074SV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x59klwyrdb6hswzlvwd.png\" width=\"880\"/>\n </a>\n</p>\n<h2>\n <a href=\"#requirements\" name=\"requirements\">\n </a>\n Requirements:\n</h2>\n<h3>\n <a href=\"#web-parsing-with-css-selectors\" name=\"web-parsing-with-css-selectors\">\n </a>\n Web Parsing with CSS selectors\n</h3>\n<p>\n Searching the tags from the HTML files is not only a difficult thing to do but also a time-consuming process. It is better to use the\n <a href=\"https://chrome.google.com/webstore/detail/selectorgadget/mhjhnkcfbdhnjickkkdbjoemdmbfginb\">\n  CSS Selectors Gadget\n </a>\n for selecting the perfect tags to make your web scraping journey easier.\n</p>\n<p>\n This gadget can help you to come up with the perfect CSS selector for your need. Here is the link to the\n <a href=\"https://selectorgadget.com/\">\n  tutorial\n </a>\n , which will teach you to use this gadget for selecting the best CSS selectors according to your needs.\n</p>\n<h3>\n <a href=\"#user-agents\" name=\"user-agents\">\n </a>\n User Agents\n</h3>\n<p>\n User-Agent is used to identify the application, operating system, vendor, and version of the requesting user agent, which can save help in making a fake visit to Google by acting as a real user.\n</p>\n<p>\n You can also rotate User Agents, read more about this in this article:\n <a href=\"https://www.scrapehero.com/how-to-fake-and-rotate-user-agents-using-python-3/\">\n  How to fake and rotate User Agents using Python 3\n </a>\n .\n</p>\n<p>\n If you want to further safeguard your IP from being blocked by Google, you can try these\n <a href=\"https://serpdog.io/blog/web-scraping-google-without-getting-blocked\">\n  10 Tips to avoid getting Blocked while Scraping Google\n </a>\n .\n</p>\n<h3>\n <a href=\"#install-libraries\" name=\"install-libraries\">\n </a>\n Install Libraries\n</h3>\n<p>\n To scrape Google Jobs results we need to install some NPM libraries to move forward.\n</p>\n<ol>\n <li>\n  <a href=\"https://www.npmjs.com/package/unirest\">\n   Unirest JS\n  </a>\n </li>\n <li>\n  <a href=\"https://www.npmjs.com/package/cheerio\">\n   Cheerio JS\n  </a>\n </li>\n</ol>\n<p>\n So before starting, we have to ensure that we have set up our Node JS project and installed both the packages \u2014 Unirest JS and Cheerio JS. You can install both packages from the above link.\n</p>\n<h2>\n <a href=\"#target\" name=\"target\">\n </a>\n Target\n</h2>\n<p>\n <a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--k5lZ1NNl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4q3frujghdpo22hajiq.png\">\n  <img alt=\"Scrape Google Jobs Results 2\" height=\"473\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--k5lZ1NNl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4q3frujghdpo22hajiq.png\" width=\"880\"/>\n </a>\n</p>\n<h2>\n <a href=\"#process\" name=\"process\">\n </a>\n Process\n</h2>\n<p>\n Let\u2019s begin the process of scraping the Google Jobs Results. We will be using Unirest JS to extract the raw HTML data and parse this data with the help of Cheerio JS.\n</p>\n<p>\n Open the below link in your browser, so we can start selecting the HTML tags for the required elements.\n</p>\n<p>\n <code>\n  https://www.google.com/search?q=web+developer+in+mumbai&amp;ibp=htl;jobs&amp;hl=en\n </code>\n</p>\n<p>\n Let us make a GET request using Unirest JS on the target URL.\n <br/>\n</p>\n<p>\n <strong>\n  Step-by-step explanation:\n </strong>\n</p>\n<ol>\n <li>\n  In the fifth line, we made a GET request to the target URL.\n </li>\n <li>\n  In the next line, we passed User-Agent as a header with the URL, so our bot can mimic a real organic user.\n </li>\n <li>\n  Next, we load the response in a cheerio instance variable.\n </li>\n</ol>\n<p>\n Now, we will prepare our parser by searching the tags with the help CSS selector gadget, stated above in the Requirements section.\n</p>\n<p>\n <a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--rYToI_w8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy1bfh98nadew3mhfw27.png\">\n  <img alt=\"Scrape Google Jobs Results 3\" height=\"523\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--rYToI_w8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy1bfh98nadew3mhfw27.png\" width=\"880\"/>\n </a>\n</p>\n<p>\n All the jobs tabs you saw above are inside an HTML tag\n <code>\n  li.iFjolb\n </code>\n . So its parser will look like this:\n <br/>\n</p>\n<p>\n Then we will start selecting the tags to scrape the required data.\n</p>\n<p>\n <a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--8_Y-eSvG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et88c0zzi3g1f1caa3qk.png\">\n  <img alt=\"Scrape Google Jobs 4\" height=\"571\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--8_Y-eSvG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et88c0zzi3g1f1caa3qk.png\" width=\"880\"/>\n </a>\n</p>\n<p>\n After adding this tag to our scraper, it looks like this:\n <br/>\n</p>\n<p>\n Then we will parse the company name.\n</p>\n<p>\n <a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--vcY3WkMI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfb5s6p5tqyu0bz2mbjd.png\">\n  <img alt=\"Scrape Google Jobs 5\" height=\"562\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--vcY3WkMI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfb5s6p5tqyu0bz2mbjd.png\" width=\"880\"/>\n </a>\n</p>\n<p>\n From the above image, we found the tag for the company name as\n <code>\n  .vNEEBe\n </code>\n . Similarly, we can find the tags for the other required data fields also, which makes our parser looks like this:\n <br/>\n</p>\n<p>\n <strong>\n  Results:\n </strong>\n <br/>\n</p>\n<h2>\n <a href=\"#with-google-jobs-api\" name=\"with-google-jobs-api\">\n </a>\n With\n <a href=\"https://docs.serpdog.io/google-jobs-api\">\n  Google Jobs API\n </a>\n</h2>\n<p>\n If you don\u2019t want to code and maintain the scraper in the long run and don\u2019t want to work with complex URLs and HTML, then you can try this\n <a href=\"https://serpdog.io\">\n  Google Search API\n </a>\n .\n</p>\n<p>\n Serpdog | Google Search API solves all the problem of captchas and proxies and allow developers to scrape Google Search Results smoothly. Also, the pre-cooked structured JSON data can save you a lot of time.\n <br/>\n</p>\n<p>\n <strong>\n  Results:\n </strong>\n <br/>\n</p>\n<h2>\n <a href=\"#conclusion\" name=\"conclusion\">\n </a>\n Conclusion:\n</h2>\n<p>\n In this tutorial, we learned to scrape Google Jobs Results with Node JS. Feel free to\n <a href=\"https://drift.me/darshankhandelwal12\">\n  message me\n </a>\n if I missed something. Follow me on\n <a href=\"https://twitter.com/serpdogAPI\">\n  Twitter\n </a>\n . Thanks for reading!\n</p>\n<h2>\n <a href=\"#additional-resources\" name=\"additional-resources\">\n </a>\n Additional Resources\n</h2>\n<ol>\n <li>\n  <a href=\"https://serpdog.io/blog/web-scraping-google-with-node-js\">\n   Web Scraping Google With Node JS \u2014 A Complete Guide\n  </a>\n </li>\n <li>\n  <a href=\"https://serpdog.io/blog/web-scraping-google-without-getting-blocked\">\n   Web Scraping Google Without Getting Blocked\n  </a>\n </li>\n <li>\n  <a href=\"https://serpdog.io/blog/scrape-google-organic-search-results\">\n   Scrape Google Organic Search Results\n  </a>\n </li>\n <li>\n  <a href=\"https://serpdog.io/blog/scrape-google-shopping-results\">\n   Scrape Google Shopping Results\n  </a>\n </li>\n <li>\n  <a href=\"https://serpdog.io/blog/scrape-google-maps-reviews\">\n   Scrape Google Maps Reviews\n  </a>\n </li>\n</ol>\n<h2>\n <a href=\"#author\" name=\"author\">\n </a>\n Author:\n</h2>\n<p>\n My name is Darshan, and I am the founder of\n <a href=\"https://serpdog.io\">\n  serpdog.io\n </a>\n . I love to create scrapers. I am currently working for several MNCs to provide them with Google Search Data through a seamless data pipeline.\n</p>\n",
        "likes": 174,
        "tag": "Resources"
    },
    {
        "id": "bUtVmS",
        "publisher_pic": "https://res.cloudinary.com/practicaldev/image/fetch/s--60FmTTJ8--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/584582/70be12eb-0227-48f0-b401-7a01e86cf0e2.jpeg",
        "publisher_name": "shrey vijayvargiya",
        "publish_date": "Published on Nov 22",
        "article_banner": "https://res.cloudinary.com/practicaldev/image/fetch/s--lLvmKLFG--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kad64s1vr8rk2l6cebvz.png",
        "article_title": "Top 4 Free Fake API",
        "article_content": "<p>\n <strong>\n  Under the Hood\n </strong>\n <br/>\n Sometimes we need sample data to develop and test our projects before launching. In today's story, jotting down the top 4 Fake Free APIs for data.\n</p>\n<p>\n <strong>\n  JSON placeholder\n </strong>\n <br/>\n <a href=\"https://jsonplaceholder.typicode.com/\">\n  Link\n </a>\n</p>\n<p>\n <strong>\n  Fakerjs\n </strong>\n <br/>\n Generate massive amounts of fake (but realistic) data for testing and development.\n</p>\n<p>\n <a href=\"https://fakerjs.dev/\">\n  Link\n </a>\n</p>\n<p>\n <a href=\"https://ihatereading.in/t/JqrE2W88AYwKKQGTMzVT/Create-massive-random-data-using-faker.js\">\n  Detailed article\n </a>\n</p>\n<p>\n <strong>\n  Random Users\n </strong>\n <br/>\n For generating random user data. Like Lorem Ipsum, but for people.\n</p>\n<p>\n <a href=\"https://randomuser.me/\">\n  Link\n </a>\n</p>\n<p>\n <strong>\n  Fake Store API\n </strong>\n <br/>\n Fake store rest API for your e-commerce or shopping website prototype.\n</p>\n<p>\n <a href=\"https://fakestoreapi.com/\">\n  Link\n </a>\n</p>\n<p>\n That's it for today, until next time, have a good day.\n <br/>\n <strong>\n  Keep developing\n  <br/>\n  Shrey\n  <br/>\n  <a href=\"//ihatereading.in\">\n   iHateReading\n  </a>\n </strong>\n</p>\n",
        "likes": 515,
        "tag": "Social Media"
    },
    {
        "id": "QV6IPc",
        "publisher_pic": "https://res.cloudinary.com/practicaldev/image/fetch/s--VODuMINB--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/196826/c4f5f26f-1f46-4633-9d5a-0e1a1fb39a95.jpeg",
        "publisher_name": "Necati \u00d6zmen",
        "publish_date": "Published on Nov 22",
        "article_banner": "https://res.cloudinary.com/practicaldev/image/fetch/s--EEgEi1UB--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rt1qxvq1337ntpzzoats.png",
        "article_title": "Error Handling With try, catch and finally Blocks in JavaScript",
        "article_content": "<p>\n <strong>\n  Author:\n  <a href=\"https://refine.dev/blog/author/abdullah_numan/\">\n   Abdullah Numan\n  </a>\n </strong>\n</p>\n<h2>\n <a href=\"#introduction\" name=\"introduction\">\n </a>\n Introduction\n</h2>\n<p>\n This post is about graceful error handling in JavaScript where we explore the use of\n <code>\n  try/catch/finally\n </code>\n blocks.\n</p>\n<p>\n Steps we'll cover:\n</p>\n<ul>\n <li>\n  <a href=\"#what-are-errors\">\n   What are Errors?\n  </a>\n  <ul>\n   <li>\n    <a href=\"#what-is-graceful-error-handling\">\n     What is Graceful Error Handling?\n    </a>\n   </li>\n  </ul>\n </li>\n <li>\n  <a href=\"#how-trycatchfinally-blocks-work\">\n   How\n   <code>\n    try/catch/finally\n   </code>\n   Blocks Work\n  </a>\n  <ul>\n   <li>\n    <a href=\"#running-usual-code-in-the-try-block\">\n     Running Usual Code In The\n     <code>\n      try\n     </code>\n     Block\n    </a>\n   </li>\n  </ul>\n </li>\n <li>\n  <a href=\"#the-catch-block\">\n   The\n   <code>\n    catch\n   </code>\n   Block\n  </a>\n  <ul>\n   <li>\n    <a href=\"#the-finally-block\">\n     The\n     <code>\n      finally\n     </code>\n     Block\n    </a>\n   </li>\n  </ul>\n </li>\n</ul>\n<h2>\n <a href=\"#what-are-errors\" name=\"what-are-errors\">\n </a>\n What are Errors?\n</h2>\n<p>\n Errors are integral part of programming. Errors in JavaScript can arise while writing code due to syntax related issues like missing or mistyped variables, duplicate variables, wrong use of JavaScript constructs, etc. They can also happen at run time due to internal errors at an external server, unreachable resources at an API endpoint, broken or missing data structures - whose interfaces are usually manipulated by our program, etc.\n</p>\n<p>\n Syntax errors are generally tracked by linters but are also pointed out when the buggy code is executed by JavaScript's engine, i.e. at run time. Errors thrown at run time are often referred to as\n <strong>\n  exceptions\n </strong>\n . Exceptions throw an\n <code>\n  Error\n </code>\n object that - if unhandled proactively - instantly terminates the script and does not allow execution of the rest of the code.\n</p>\n<p>\n So, when an error is expected, in order to avoid breaking our program, it is important to handle errors gracefully and direct the flow of the program to a safe avenue where further execution resumes unhindered.\n</p>\n<h3>\n <a href=\"#what-is-graceful-error-handling\" name=\"what-is-graceful-error-handling\">\n </a>\n What is Graceful Error Handling?\n</h3>\n<p>\n Graceful error handling refers to an approach in programming where we proactively consider the scenarios that might lead to an error, design our control flow to handle these possible errors and direct the control of the program in each case in such a way that execution continues unterminated.\n</p>\n<p>\n In JavaScript, we do this with the\n <code>\n  try/catch/finally\n </code>\n construct.\n</p>\n<p>\n In this article, we get into the details of what the\n <code>\n  try\n </code>\n ,\n <code>\n  catch\n </code>\n and\n <code>\n  finally\n </code>\n blocks represent and how they work together with examples. And on the way, we will discuss about what nesting of these blocks bring to the table. We'll also spend some time delving into how the\n <code>\n  finally {...}\n </code>\n block is used to guide the control of the script to carry out routine procedures, like closing down a write stream in a file.\n</p>\n<p>\n Let's start with how\n <code>\n  try/catch/finally\n </code>\n works first.\n</p>\n<hr/>\n<h2>\n <a href=\"#building-a-side-project\" name=\"building-a-side-project\">\n </a>\n Building a side project?\n</h2>\n<p>\n Meet the headless, React-based solution to build sleek CRUD applications. With\n <strong>\n  refine\n </strong>\n , you can build complex projects without having advanced frontend skills.\n</p>\n<p>\n Try\n <a href=\"https://github.com/pankod/refine\">\n  refine\n </a>\n to rapidly build your next\n <strong>\n  CRUD\n </strong>\n project, whether it's an admin panel, dashboard, internal tool or storefront.\n</p>\n<p>\n <a href=\"https://github.com/pankod/refine\">\n  <br/>\n  <img alt=\"refine blog logo\" height=\"809\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Mtisgi6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://refine.dev/img/generic_banner.png\" width=\"880\"/>\n  <br/>\n </a>\n</p>\n<hr/>\n<h2>\n <a href=\"#how-raw-trycatchfinally-endraw-blocks-work\" name=\"how-raw-trycatchfinally-endraw-blocks-work\">\n </a>\n How\n <code>\n  try/catch/finally\n </code>\n Blocks Work\n</h2>\n<p>\n The\n <code>\n  try/catch/finally\n </code>\n construct, it's obvious, can have three possible blocks. A\n <code>\n  try {...}\n </code>\n block, a\n <code>\n  catch {...}\n </code>\n block and a\n <code>\n  finally {...}\n </code>\n block. Of these three,\n <code>\n  try {...}\n </code>\n is always a must. And we need one more: either\n <code>\n  catch {...}\n </code>\n or\n <code>\n  finally {...}\n </code>\n to make the\n <code>\n  try {...}\n </code>\n block relevant. The possible scenarios covered by this are:\n <br/>\n</p>\n<p>\n So at least two blocks make up a\n <code>\n  try\n </code>\n control flow. We can also have another possibility that involves the\n <code>\n  finally {...}\n </code>\n block as the third:\n <br/>\n</p>\n<p>\n Below, we go through each block with examples for each possible scenario above.\n</p>\n<h3>\n <a href=\"#running-usual-code-in-the-raw-try-endraw-block\" name=\"running-usual-code-in-the-raw-try-endraw-block\">\n </a>\n Running Usual Code In The\n <code>\n  try\n </code>\n Block\n</h3>\n<p>\n The\n <code>\n  try {...}\n </code>\n block contains the code which we want to execute in our normal control flow but bears the risk of throwing an error. It could be just another part of the synchronous procedures we declare in our script, such as the first\n <code>\n  console.log()\n </code>\n statement below:\n <br/>\n</p>\n<p>\n Here, the control makes it to the safe zone and logs both statements. But if we introduce an error, the program crashes entirely - not reaching the the safe avenue:\n <br/>\n</p>\n<p>\n Here, the intentional mistake in\n <code>\n  console.logd\n </code>\n throws a\n <code>\n  TypeError\n </code>\n . And strikingly, the execution is halted entirely. No dealing with the error, no redirection, just a bunch of stack information.\n</p>\n<p>\n That's bad. We need to deal with this proactively.\n</p>\n<p>\n Let's use a\n <code>\n  try/catch\n </code>\n block. We need to put the code of our interest inside the\n <code>\n  try\n </code>\n block:\n <br/>\n</p>\n<p>\n Now, we placed our\n <code>\n  console.logd()\n </code>\n statement inside the\n <code>\n  try\n </code>\n block. It's still buggy and throws the same exception, but it did not lead to termination of execution. It instead diverted the control to the\n <code>\n  catch\n </code>\n block, executed the code there and eventually moved control to the safe zone.\n</p>\n<p>\n Let's just fix the error so the control remains in the\n <code>\n  try\n </code>\n block and the program makes it to the safe zone through our desired, error-free path:\n <br/>\n</p>\n<p>\n And it does.\n</p>\n<p>\n <strong>\n  <code>\n   try\n  </code>\n  Block with Synchronous Functions\n </strong>\n</p>\n<p>\n We can invoke any function inside the\n <code>\n  try\n </code>\n block. Let's refactor the first log statement into a function and use it inside\n <code>\n  try\n </code>\n block:\n <br/>\n</p>\n<p>\n The result is the same.\n</p>\n<h2>\n <a href=\"#the-raw-catch-endraw-block\" name=\"the-raw-catch-endraw-block\">\n </a>\n The\n <code>\n  catch\n </code>\n Block\n</h2>\n<p>\n Now, as we've seen in the buggy\n <code>\n  console.logd()\n </code>\n example, presence of the\n <code>\n  catch\n </code>\n block creates a fork when we have errors in our desired flow in the\n <code>\n  try\n </code>\n block. Let's focus on the\n <code>\n  catch\n </code>\n block now.\n</p>\n<p>\n The\n <code>\n  catch\n </code>\n block offers an alternate channel to transfer execution control in the case of an error raised in the\n <code>\n  try\n </code>\n block. When an error is raised, the\n <code>\n  catch\n </code>\n block allows a way out from crashing the program. That is, the\n <code>\n  catch\n </code>\n block allows us to handle errors gracefully.\n</p>\n<p>\n <strong>\n  <code>\n   catch\n  </code>\n  Without the\n  <code>\n   Error\n  </code>\n  Object\n </strong>\n</p>\n<p>\n In the previous example, when we erred with\n <code>\n  console.logd()\n </code>\n , we were able to log another statement we provided in the\n <code>\n  catch\n </code>\n block:\n <br/>\n</p>\n<p>\n Notice in the beginning of the\n <code>\n  catch\n </code>\n block, we don't have any argument passed. This is because, here we did not require access to the\n <code>\n  Error\n </code>\n object produced by our error.\n</p>\n<p>\n So, we may choose to ignore the\n <code>\n  Error\n </code>\n object totally.\n</p>\n<p>\n <strong>\n  <code>\n   catch\n  </code>\n  With the\n  <code>\n   Error\n  </code>\n  Object\n </strong>\n</p>\n<p>\n However, we may also choose to use the\n <code>\n  Error\n </code>\n object if we need to. And most often we do.\n</p>\n<p>\n We can access the\n <code>\n  Error\n </code>\n object as an argument passed to the\n <code>\n  catch\n </code>\n block, with\n <code>\n  catch(e)\n </code>\n or anything replacing\n <code>\n  e\n </code>\n really. It's the only argument that's available from\n <code>\n  try\n </code>\n to the\n <code>\n  catch\n </code>\n block. And it's not available to other blocks.\n</p>\n<p>\n It consists of the\n <code>\n  name\n </code>\n of the error and a\n <code>\n  message\n </code>\n . Let's see what the error was in our above case:\n <br/>\n</p>\n<p>\n Clearly, it was our intentional typo.\n</p>\n<p>\n <strong>\n  <code>\n   throw\n  </code>\n  ing Custom Errors\n </strong>\n</p>\n<p>\n It is important to note that exceptions thrown at the\n <code>\n  try\n </code>\n block is caught by only the\n <code>\n  catch\n </code>\n block of the same construct. We'll come to this in the next two sections below. Exceptions thrown in the\n <code>\n  catch\n </code>\n block itself and in the\n <code>\n  finally\n </code>\n block are not accessible from the\n <code>\n  catch\n </code>\n block of the same construct.\n</p>\n<p>\n We can throw custom errors with JavaScript's\n <code>\n  throw\n </code>\n method, and even if there is perfect code written after the\n <code>\n  throw\n </code>\n , the later code won't be run because the control has moved to the\n <code>\n  catch\n </code>\n block already:\n <br/>\n</p>\n<p>\n Here, the \"perfect code\" statement did not get logged to the console, because\n <code>\n  try\n </code>\n spewed\n <code>\n  Error\n </code>\n before that and control already moved to\n <code>\n  catch\n </code>\n .\n</p>\n<p>\n <strong>\n  Nested\n  <code>\n   try/catch\n  </code>\n  Blocks\n </strong>\n</p>\n<p>\n We can nest\n <code>\n  try/catch\n </code>\n blocks. Let's see how errors interact between nesting levels:\n <br/>\n</p>\n<p>\n In the above snippet, the custom error thrown in the nested\n <code>\n  try\n </code>\n block is caught in the\n <code>\n  catch\n </code>\n block of the same construct. That is, it remains in the same level.\n</p>\n<p>\n <strong>\n  Rethrowing\n </strong>\n</p>\n<p>\n We can rethrow an error in a nested\n <code>\n  try/catch\n </code>\n block, and it will be picked by an ancestor\n <code>\n  try/catch\n </code>\n block:\n <br/>\n</p>\n<p>\n In the above chunk, we rethrew\n <code>\n  e\n </code>\n with\n <code>\n  throw(e)\n </code>\n inside the\n <code>\n  catch\n </code>\n block of the child\n <code>\n  try/catch\n </code>\n block. It was picked up by the\n <code>\n  catch\n </code>\n block of the parent\n <code>\n  try/catch\n </code>\n section:\n <br/>\n</p>\n<p>\n These are most of the \"gotchas\" of using the\n <code>\n  catch\n </code>\n block.\n</p>\n<p>\n <a href=\"https://discord.gg/refine\">\n  <br/>\n  <img alt=\"discord banner\" height=\"298\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2_J7EmD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://refine.dev/img/discord_big_blue.png\" width=\"880\"/>\n  <br/>\n </a>\n</p>\n<h3>\n <a href=\"#the-raw-finally-endraw-block\" name=\"the-raw-finally-endraw-block\">\n </a>\n The\n <code>\n  finally\n </code>\n Block\n</h3>\n<p>\n The\n <code>\n  finally {...}\n </code>\n block - if applied - is the block where the control flow moves before it exits the\n <code>\n  try/catch/finally\n </code>\n or\n <code>\n  try/finally\n </code>\n construct. It contains code that is part of the standard set of procedures, such as closing the write stream of a file regardless of whether an attempted write operation throws an error or not:\n <br/>\n</p>\n<p>\n In the example above, we're writing to a file using\n <code>\n  Node.js\n </code>\n <code>\n  fs\n </code>\n module. After a successful write operation, we want to declare that we have ended writing by closing the write stream with\n <code>\n  writeStream.end()\n </code>\n .\n</p>\n<p>\n <strong>\n  <code>\n   try/finally\n  </code>\n  Only\n </strong>\n</p>\n<p>\n We could have only used a\n <code>\n  try/finally\n </code>\n block, only if we knew we won't run into errors:\n <br/>\n</p>\n<h2>\n <a href=\"#conclusion\" name=\"conclusion\">\n </a>\n Conclusion\n</h2>\n<p>\n In this article, we discussed in depth about graceful error handling in JavaScript using the\n <code>\n  try/catch/finally\n </code>\n construct. We found out that putting our error-prone code inside a\n <code>\n  try {...}\n </code>\n block allows us to catch any thrown exception. This prevents our program from crashing.\n</p>\n<p>\n We also saw that\n <code>\n  try/catch\n </code>\n blocks can be nested, exceptions thrown in nested\n <code>\n  try/catch\n </code>\n blocks can be rethrown and picked from ancestor\n <code>\n  try/catch\n </code>\n blocks.\n</p>\n<p>\n Later, we looked into the details of how the\n <code>\n  finally {..}\n </code>\n block is used to conduct routine procedures, regardless of whether the main operation in the\n <code>\n  try\n </code>\n block throws an error or not.\n</p>\n",
        "likes": 674,
        "tag": "Programming"
    },
    {
        "id": "2Oviki",
        "publisher_pic": "https://res.cloudinary.com/practicaldev/image/fetch/s--VpMprljf--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/133033/e54b373e-0802-48f3-b738-856864db99e3.jpeg",
        "publisher_name": "Lenka",
        "publish_date": "Published on Nov 18",
        "article_banner": "https://res.cloudinary.com/practicaldev/image/fetch/s--BO7Se7Iy--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sihibrhvfgqnfb0qirti.png",
        "article_title": "Welcome to Apillon, your Web3 development platform",
        "article_content": "<p>\n There's a new kit on the block.\n</p>\n<p>\n Apillon, a Web3 development platform, empowers developers to build applications in the Polkadot ecosystem simply through APIs and other linked Web3 services.\n</p>\n<h2>\n <a href=\"#what-does-apillon-mean\" name=\"what-does-apillon-mean\">\n </a>\n What does Apillon mean?\n</h2>\n<p>\n The name Apillon was coined from two separate terms \u2014 API and papillon.\n</p>\n<ul>\n <li>\n  API \u2014 Application Programming Interface\n </li>\n <li>\n  Papillon \u2014 a French word for a butterfly, symbolizing metamorphosis to Web3\n </li>\n</ul>\n<p>\n Apillon introduces the most effective way to bring Web3 services to real-life usability through its development platform that provides API access to parachain functionalities.\n</p>\n<p>\n <a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--J1mVV-ZV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qcf8w3swbaaxnlnrd4u1.gif\">\n  <img alt=\"Image description\" data-animated=\"true\" height=\"495\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--J1mVV-ZV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qcf8w3swbaaxnlnrd4u1.gif\" width=\"880\"/>\n </a>\n</p>\n<h2>\n <a href=\"#rethinking-web3-development\" name=\"rethinking-web3-development\">\n </a>\n Rethinking Web3 development\n</h2>\n<p>\n After years of working in the Web3 environment and developing solutions on top of DLT networks, the project team has discovered the need for better tools that would allow developers to adopt the Web3 infrastructure easily and to create apps and products for current and future generations.\n</p>\n<p>\n Apillon was designed to connect the broader Web3 ecosystem and provide every developer with a common ground to build upon. Instead of having to master complex distributed technologies, developers can simply connect to chosen APIs, call a function, and launch their Web3 products in a much shorter time.\n</p>\n<h2>\n <a href=\"#find-out-more\" name=\"find-out-more\">\n </a>\n Find out more\n</h2>\n<p>\n Learn more about the new way to build Web3 products on the\n <a href=\"https://apillon.io/\">\n  Apillon Website\n </a>\n , the\n <a href=\"https://medium.com/apillon\">\n  Apillon blog\n </a>\n , and the\n <a href=\"https://wiki.apillon.io/\">\n  Apillon Wiki\n </a>\n .\n</p>\n<p>\n Join our live social media channels (links below) and co-create the future of the web.\n</p>\n<p>\n See you on the other side!\n</p>\n<hr/>\n<h2>\n <a href=\"#%E2%A7%93-about-apillon\" name=\"%E2%A7%93-about-apillon\">\n </a>\n \u29d3 About Apillon\n</h2>\n<p>\n The Apillon platform serves as a unified gateway to the Web3 services provided by linked Polkadot parachains. Following the multi-chain vision, Apillon powers developers' transition to Web3, simplifying its adoption in the real economy, and expanding its versatility as the ecosystem grows. With Authtrail, Web3 services are within reach for every developer, regardless of their background and experience with blockchain technology.\n</p>\n<p>\n <a href=\"https://apillon.io/\">\n  Website\n </a>\n |\n <a href=\"https://github.com/Apillon-web3\">\n  GitHub\n </a>\n |\n <a href=\"https://twitter.com/apillon\">\n  Twitter\n </a>\n |\n <a href=\"https://t.me/Apillon\">\n  Telegram\n </a>\n |\n <a href=\"https://www.linkedin.com/company/apillon/\">\n  LinkedIn\n </a>\n |\n <a href=\"https://www.reddit.com/r/apillon/\">\n  Reddit\n </a>\n</p>\n",
        "likes": 875,
        "tag": "Go"
    },
    {
        "id": "wjfKjM",
        "publisher_pic": "https://res.cloudinary.com/practicaldev/image/fetch/s--OOIOJhl---/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/384066/01db87cb-ac53-4368-b16b-02652ff5d9c8.png",
        "publisher_name": "Julia \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbb",
        "publish_date": "Published on Nov 12",
        "article_banner": "https://res.cloudinary.com/practicaldev/image/fetch/s--R8lTF8Wv--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukens20sn7j20uf3kmul.png",
        "article_title": "Tools I Am Using On A Daily Basis",
        "article_content": "<p>\n I get ask a lot on what kind of tools I am using on a daily basis, and why. I created a list of all my favorite tools which keep me productive and help me reach the goals I want to achieve.\n</p>\n<blockquote class=\"ltag__twitter-tweet\" data-url=\"https://twitter.com/yuridevat/status/1589345121639825408\">\n <div class=\"ltag__twitter-tweet__main\" data-url=\"https://twitter.com/yuridevat/status/1589345121639825408\">\n  <div class=\"ltag__twitter-tweet__header\">\n   <img alt=\"Julia | AccessibilityFirst \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbb Content Creator profile image\" class=\"ltag__twitter-tweet__profile-image\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--CmDMIDfC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1467495467013582853/CluAE_PV_normal.jpg\"/>\n   <div class=\"ltag__twitter-tweet__full-name\">\n    Julia | AccessibilityFirst \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbb Content Creator\n   </div>\n   <div class=\"ltag__twitter-tweet__username\">\n    <a class=\"mentioned-user\" href=\"https://dev.to/yuridevat\">\n     @yuridevat\n    </a>\n   </div>\n   <div class=\"ltag__twitter-tweet__twitter-logo\">\n    <img alt=\"twitter logo\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg\"/>\n   </div>\n  </div>\n  <div class=\"ltag__twitter-tweet__body\">\n   One way to stay productive is to find the right tools that make working on side projects and creating content more convenient and easier.\n   <br/>\n   <br/>\n   Tools I use regularly:\n   <br/>\n   \ud83d\udc19 GitHub\n   <br/>\n   \ud83d\udc69\u200d\ud83d\udcbb VS Code\n   <br/>\n   \ud83d\udcd3 Notion\n   <br/>\n   \ud83e\uddd1\u200d\ud83c\udfa8 Canva\n   <br/>\n   \ud83c\udfb6 Spotify (who codes without music?)\n   <br/>\n   \ud83c\udfa8 Figma\n  </div>\n  <div class=\"ltag__twitter-tweet__date\">\n   19:53 PM - 06 Nov 2022\n  </div>\n  <div class=\"ltag__twitter-tweet__actions\">\n   <a class=\"ltag__twitter-tweet__actions__button\" href=\"https://twitter.com/intent/tweet?in_reply_to=1589345121639825408\">\n    <img alt=\"Twitter reply action\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg\"/>\n   </a>\n   <a class=\"ltag__twitter-tweet__actions__button\" href=\"https://twitter.com/intent/retweet?tweet_id=1589345121639825408\">\n    <img alt=\"Twitter retweet action\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg\"/>\n   </a>\n   <a class=\"ltag__twitter-tweet__actions__button\" href=\"https://twitter.com/intent/like?tweet_id=1589345121639825408\">\n    <img alt=\"Twitter like action\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg\"/>\n   </a>\n  </div>\n </div>\n</blockquote>\n<h2>\n <a href=\"#my-favorite-tools\" name=\"my-favorite-tools\">\n </a>\n My favorite tools\n</h2>\n<ul>\n <li>\n  Canva\n </li>\n <li>\n  Visual Studio Code (VS Code)\n </li>\n <li>\n  GitHub\n </li>\n <li>\n  Notion\n </li>\n <li>\n  Dev To\n </li>\n <li>\n  Axe Dev Tools\n </li>\n <li>\n  Figma\n </li>\n <li>\n  Frontend Masters\n </li>\n <li>\n  MacBook Air\n </li>\n <li>\n  Spotify\n </li>\n <li>\n  Twitter\n </li>\n</ul>\n<h3>\n <a href=\"#canva\" name=\"canva\">\n </a>\n Canva\n</h3>\n<p>\n Canva has a huge amount of great images, graphics, templates, and so on to find ideas and inspiration to create your own styles.\n</p>\n<p>\n They recently added a punch of new features like creating presentations, recording yourself and show the video of yourself and the presentation at the same time, post scheduling when connected with your Social Media accounts like LinkedIn, Instagram, and much more.\n</p>\n<p>\n Canva is actually the first (and until now only) tool I am paying for since I cannot live without any more after 2 years of usage.\n</p>\n<h3>\n <a href=\"#vs-code\" name=\"vs-code\">\n </a>\n VS Code\n</h3>\n<p>\n VS Code is my go to editor when it comes to frontend. With many great extensions I feel comfortable using it for all my projects without facing any problems. I like the DX (developer experience) it is providing.\n</p>\n<h3>\n <a href=\"#github\" name=\"github\">\n </a>\n GitHub\n</h3>\n<p>\n Not only do I use GitHub to store my code, I even use it as my portfolio which I share when applying for jobs \ud83d\ude43\n</p>\n<h3>\n <a href=\"#notion\" name=\"notion\">\n </a>\n Notion\n</h3>\n<p>\n I literally have everything stored on notion: blog ideas, business ideas, yearly goals, monthly goals, and even smaller to do lists connected to each other, University classes, job applications, code snippets, and much more.\n</p>\n<p>\n Notion is providing different kinds of templates, which makes it a lot easier to store and sort everything.\n</p>\n<h3>\n <a href=\"#dev-to\" name=\"dev-to\">\n </a>\n Dev To\n</h3>\n<p>\n I am going through dev.to every morning, reading the latest blog posts with the tags I am interested in. Dev.to helped me grow when I started to learn how to code and become a content writer myself. All articles I have ever written are on dev.to. \ud83d\udc9f\n</p>\n<h3>\n <a href=\"#axe-dev-tools\" name=\"axe-dev-tools\">\n </a>\n Axe Dev Tools\n</h3>\n<p>\n Axe dev tools makes it easy for me to check websites on obvious accessibility issues fast and provides good information on how to solve these issues.\n</p>\n<p>\n This helps me understand common problems and their solutions better. Because going solely through w3c documentation is \ud83e\udd2f.\n</p>\n<h3>\n <a href=\"#figma\" name=\"figma\">\n </a>\n Figma\n</h3>\n<p>\n Figma was the first design tool which made it possible that even I can create some sort of UI design which I am proud of. I used it to create thumbnails in the beginning and now I have to work with it every day at work, creating design systems and prototypes. Great DX, easy to understand, fun to work with.\n</p>\n<h3>\n <a href=\"#frontend-masters\" name=\"frontend-masters\">\n </a>\n Frontend Masters\n</h3>\n<p>\n I often watch videos at Frontend Masters, and I love the way they teach. Even every one of them has their own style they are always making it possible for me to understand. I am very greatful for that!\n</p>\n<p>\n Even though I still have a student subscription, FEM will be the second app which I am going to pay for because of its great content provided.\n</p>\n<h3>\n <a href=\"#macbook-air\" name=\"macbook-air\">\n </a>\n MacBook Air\n</h3>\n<p>\n Since I have a MacBook Air 13\u201c, my productivity increased a lot. I can share content from my iPhone to MacBook by simply\n <code>\n  copy + paste\n </code>\n .\n</p>\n<p>\n I like MacOS, and since a have to work with a Lenovo Thinkpad on Windows at work, I be able to compare them first hand and know that finally switching to Apple was the right choice.\n</p>\n<h3>\n <a href=\"#spotify\" name=\"spotify\">\n </a>\n Spotify\n</h3>\n<p>\n Who else is listening to music while coding? \ud83d\ude4b\ud83c\udffb\u200d\u2640\ufe0f\n</p>\n<p>\n I like that Spotify provides an easy way to save your favorite music, create playlists and much more.\n</p>\n<p>\n But I still have to switch to Youtube and some point which is kind of annoying. When it comes to certain film music (film, animation, anime), the content is not that good. Hopefully, it will get better \ud83d\ude4f.\n</p>\n<h3>\n <a href=\"#twitter\" name=\"twitter\">\n </a>\n Twitter\n</h3>\n<p>\n The great tech community on Twitter is helping me a lot to improve myself since I started my coding journey.\n</p>\n<p>\n I am thankful for every single person who is helping me when I need help, and supporting me which is super motivating and keeps me going. Thank you \ud83d\ude07\n</p>\n<p>\n What are the tools that you find most useful?\n</p>\n",
        "likes": 371,
        "tag": "Mental Health"
    },
    {
        "id": "BgNHZv",
        "publisher_pic": "https://res.cloudinary.com/practicaldev/image/fetch/s--lv4bK3fh--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1441/j8ehsrukq7v6bh6tswfc.png",
        "publisher_name": "Sacha Greif",
        "publish_date": "Published on Nov 22",
        "article_banner": "https://res.cloudinary.com/practicaldev/image/fetch/s--cxuKc6w8--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irc6lp31eh4jblvgdu19.png",
        "article_title": "The 2022 State of JavaScript Survey Is Now Open. Here's What's New",
        "article_content": "<p>\n It's hard to imagine today, but back in 2016 the JavaScript ecosystem was often considered overly complex and painful to navigate, with too many competing options and too much confusing hype.\n</p>\n<p>\n Good thing that today we've solved all those issues, and JavaScript is\u2026 What? We haven't? Still confusing 6 years later? Oh right.\n</p>\n<p>\n Well, at least now you know why I started the annual\n <a href=\"https://survey.devographics.com/survey/state-of-js/2022?source=devto_announcement\">\n  State of JavaScript\n </a>\n survey all the way back in 2016, and why as long as new front-end frameworks keep popping up faster than the average\n <code>\n  npm install\n </code>\n run time, the State of JS survey will be there to ask developers about which frameworks, features and librairies they use.\n</p>\n<p>\n In fact, you can\n <a href=\"https://survey.devographics.com/survey/state-of-js/2022?source=devto_announcement\">\n  take this year's survey right now\n </a>\n ! Go ahead, I'll be right here waiting for you. Or, read on to learn more about what's new this year.\n</p>\n<h2>\n <a href=\"#new-name-same-survey\" name=\"new-name-same-survey\">\n </a>\n New Name, Same Survey\n</h2>\n<p>\n You might have noticed that the survey is now hosted at survey.devographics.com. Now that we have not only the State of JavaScript and\n <a href=\"https://stateofcss.com/\">\n  State of CSS\n </a>\n , but also the brand new\n <a href=\"https://stateofgraphql.com/\">\n  State of GraphQL\n </a>\n surveys, we needed a new name to cover all these, and more!\n</p>\n<p>\n So what's\n <a href=\"https://www.devographics.com/\">\n  Devographics\n </a>\n exactly? Is it a company? A non-profit? A dance crew? For now, let's just call it a collective, currently centered around\n <a href=\"https://twitter.com/SachaGreif\">\n  myself\n </a>\n and\n <a href=\"https://twitter.com/ericbureltech\">\n  Eric Burel\n </a>\n , with other members such as\n <a href=\"https://github.com/lex111\">\n  Alexey Pyltsyn\n </a>\n ,\n <a href=\"https://chriskirknielsen.com/\">\n  Chris Kirk-Nielsen\n </a>\n ,\n <a href=\"https://kilianvalkhof.com/\">\n  Kilian Valkhof\n </a>\n , and\n <a href=\"http://lea.verou.me/\">\n  Lea Verou\n </a>\n pitching in when they can.\n</p>\n<p>\n <a href=\"http://2022.stateofgraphql.com/\">\n  <img alt=\"The 2022 State of GraphQL Survey Results\" height=\"560\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--A-_6l6o3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7kwbgymcgg5o666tp9ht.png\" width=\"880\"/>\n </a>\n</p>\n<p>\n <figcaption>\n  The 2022 State of GraphQL Survey Results\n </figcaption>\n</p>\n<h2>\n <a href=\"#no-account-required\" name=\"no-account-required\">\n </a>\n No Account Required\n</h2>\n<p>\n A big complaint about previous surveys was the requirement to sign up for a user account. Good news, you can now take the survey\n <strong>\n  without signing up\n </strong>\n !\n</p>\n<p>\n But there's more: even if you\n <em>\n  do\n </em>\n sign up, we will store a hash of your email address and immediately delete the email itself. This means that you can create an account (for example, in order to access or delete your data in the future), and still remain\n <strong>\n  entirely anonymous\n </strong>\n .\n</p>\n<p>\n <a href=\"https://survey.devographics.com/survey/state-of-js/2022?source=devto_announcement\">\n  <img alt=\"Take the survey anonymously\" height=\"560\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Phzsi99A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/matgalflzfb76f6pnixu.png\" width=\"880\"/>\n </a>\n</p>\n<p>\n <figcaption>\n  Take the survey anonymously\n </figcaption>\n</p>\n<p>\n And even if you sign up to be notified when the survey results come out, we'll forward your email to our newsletter provider and then \u2013you guessed it\u2013 immediately delete it from our own records.\n</p>\n<h2>\n <a href=\"#bye-bye-backend\" name=\"bye-bye-backend\">\n </a>\n Bye Bye Back-End\n</h2>\n<p>\n From the start, the State of JavaScript survey was mostly focused on the front-end, and the Back-end Frameworks section was always a weird mix of static site generators like Gatsby, full-stack frameworks like Meteor, and pure back-end servers like Express.\n</p>\n<p>\n Starting this year, we've removed the back-end section entirely and replaced it with a Rendering Frameworks section.\n</p>\n<p>\n What's a Rendering Framework? Simply put, anything that helps you render and serve an app, whether that's\n <a href=\"https://nextjs.org/\">\n  Next.js\n </a>\n ,\n <a href=\"https://www.11ty.dev/\">\n  Eleventy\n </a>\n , or even something like\n <a href=\"https://docusaurus.io/\">\n  Docusaurus\n </a>\n .\n</p>\n<p>\n <a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3LYHLgLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfj4ear8uih1tfsdw4yn.png\">\n  <img alt=\"Rendering frameworks\" height=\"560\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3LYHLgLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfj4ear8uih1tfsdw4yn.png\" width=\"880\"/>\n </a>\n</p>\n<p>\n <figcaption>\n  Rendering frameworks\n </figcaption>\n</p>\n<p>\n Don't worry though, the back-end frameworks are not completely gone: they still have their own question in the \"Other Tools\" section.\n</p>\n<p>\n And who knows, maybe one day there will be a \"State of Node.js\" survey\u2026\n</p>\n<h2>\n <a href=\"#new-question-type-top-3\" name=\"new-question-type-top-3\">\n </a>\n New Question Type: Top 3\n</h2>\n<p>\n Ranking a list of items isn't as simple as it seems. I'm personally not a fan of drag-and-drop reordering lists, as not only do they take a lot of work to get right, they can also lead to a lot of agonizing over small rank differences that don't end up meaning much when all the data is aggregated.\n</p>\n<p>\n For that reason, last year we introduced our \"tournament bracket\" question type which randomly generates an 8-item bracket and lets you pick the \"winner\" of each match-up. But many respondents pointed out that this often forces you to make unfair choices and eliminate important items right from the start, if you get a bad starting line-up.\n</p>\n<p>\n So this year we're trying something much simpler: just pick your top 3 most important items. Let us know which format you prefer!\n</p>\n<p>\n <a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--VqEjW4HO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr3cd1czmmcdtsujmy7a.png\">\n  <img alt=\"Pick your top 3 pain points\" height=\"560\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--VqEjW4HO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr3cd1czmmcdtsujmy7a.png\" width=\"880\"/>\n </a>\n</p>\n<p>\n <figcaption>\n  Pick your top 3 pain points\n </figcaption>\n</p>\n<h2>\n <a href=\"#application-patterns\" name=\"application-patterns\">\n </a>\n Application Patterns\n</h2>\n<p>\n One new dataset I'm particularly looking forward to analyzing is the \"Application Patterns\" question.\n</p>\n<p>\n <a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5qKqn93R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afzrwix0yuw2nqn8owgd.png\">\n  <img alt=\"Application patterns\" height=\"560\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5qKqn93R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afzrwix0yuw2nqn8owgd.png\" width=\"880\"/>\n </a>\n</p>\n<p>\n <figcaption>\n  Application patterns\n </figcaption>\n</p>\n<p>\n These days it seems there's literally dozens of ways you can choose to architect your JavaScript app, and we tried to reflect that in this question, with the best descriptions we could come up with.\n</p>\n<h2>\n <a href=\"#highlighting-video-creators\" name=\"highlighting-video-creators\">\n </a>\n Highlighting Video Creators\n</h2>\n<p>\n You heard it here first: video is the future. And I think this little site called YouTube has a lot of potential!\n</p>\n<p>\n So it only made sense to (finally) add a Video Creators section to the survey.\n</p>\n<p>\n <a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dl8tP1-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ady9j3nab3j1tchozwuc.png\">\n  <img alt=\"Video creators\" height=\"560\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dl8tP1-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ady9j3nab3j1tchozwuc.png\" width=\"880\"/>\n </a>\n</p>\n<p>\n <figcaption>\n  Video creators\n </figcaption>\n</p>\n<p>\n I already discovered quite a few channels just by researching this question, and I'm looking forward to learning about a lot more!\n</p>\n<h2>\n <a href=\"#take-the-survey\" name=\"take-the-survey\">\n </a>\n Take the Survey\n</h2>\n<p>\n There are a lot of developer surveys, but none of them are focused purely on the JavaScript ecosystem. And given that JavaScript is a language most of us use on a daily basis, it's really important that we get as much data as we can, in order to ensure that the survey results can be relied upon.\n</p>\n<p>\n So if you have a moment,\n <a href=\"https://survey.devographics.com/survey/state-of-js/2022?source=devto_announcement\">\n  take the survey\n </a>\n , and\n <a href=\"This%20year's%20State%20of%20JavaScript%202022%20survey%20is%20now%20open!%20https://survey.devographics.com/survey/state-of-js/2022?source=devto_announcement%20#StateOfJS\">\n  spread the word\n </a>\n if you can!\n</p>\n",
        "likes": 319,
        "tag": "React"
    },
    {
        "id": "yerdmQ",
        "publisher_pic": "https://res.cloudinary.com/practicaldev/image/fetch/s--m1TRVye1--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/336917/ce3961ef-ba8d-4759-a58a-6d9671640b11.jpg",
        "publisher_name": "Akos",
        "publish_date": "Published on Nov 18",
        "article_banner": "https://res.cloudinary.com/practicaldev/image/fetch/s--nTpYNuJr--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5sxm1i42n2pzr11uenq.jpeg",
        "article_title": "Stop Doing Coding Tutorials",
        "article_content": "<p>\n <em>\n  Disclaimer I don't want to gatekeep and tell you what tutorials are worth reading. In fact, I welcome all and every kind of tutorial, keep writing them!\n </em>\n</p>\n<p>\n <em>\n  This post is for those who are reading them and feel they're not progressing.\n </em>\n</p>\n<p>\n About a year ago I learned about the idea of tutorial purgatory or tutorial hell. I'm confident, I can set you on the right course to escape it.\n</p>\n<hr/>\n<p>\n Completing tutorials feels good. They're a lot shorter than a book, ideal for a daily dose of dopamine.\n</p>\n<p>\n They're mostly free, further encouraging you to grab them, and it can be hard to stop because there's the reward when you complete them!\n</p>\n<blockquote>\n <p>\n  Finally, I learned how to use Array.map, enough for the day! - said by no one ever\n </p>\n</blockquote>\n<h3>\n <a href=\"#why-there-are-so-many-tutorials\" name=\"why-there-are-so-many-tutorials\">\n </a>\n Why there are so many tutorials?\n</h3>\n<p>\n Tutorials exist for different reasons. Some people write tutorials for a living. They write one every single day. Is it the 20th \"Getting started with X\", \"Learning Y in 10 minutes\", or the 100th spin on \"Why you should be using Z right now\"?\n</p>\n<p>\n Some people write tutorials only to practice writing.\n</p>\n<p>\n <em>\n  You don't have to read all the tutorials out there on trivial topics like how to use\n  <code>\n   Array.map\n  </code>\n  , that's ridiculous.\n </em>\n</p>\n<p>\n I'm not talking here about tutorials discussing how to integrate different tech or platforms that sometimes indeed need a tutorial because the official docs simply cant explain the integration with every possible tech out there.\n</p>\n<h3>\n <a href=\"#what-to-do-instead\" name=\"what-to-do-instead\">\n </a>\n What to do instead?\n</h3>\n<p>\n You can create plenty by following the official documentation.\n</p>\n<p>\n Most of the libraries you want to work with already have a simple \"Getting Started\" page:\n</p>\n<p>\n React \ud83d\udc49\n <a href=\"https://reactjs.org/docs/getting-started.html\">\n  https://reactjs.org/docs/getting-started.html\n </a>\n</p>\n<p>\n Others are packed with examples, comprehensive documentation, screencasts, free courses:\n</p>\n<p>\n TailwindCSS \ud83d\udc49\n <a href=\"https://tailwindcss.com/docs\">\n  https://tailwindcss.com/docs\n </a>\n</p>\n<p>\n These are free resources. They're up to date, coming from the developers of the library itself. Packed not only with examples but best practices and patterns you should follow.\n</p>\n<h3>\n <a href=\"#conclusion\" name=\"conclusion\">\n </a>\n Conclusion\n</h3>\n<p>\n As a beginner, these pages should be your bread &amp; butter.\n</p>\n<p>\n The next step is basically just using this tech to build something.\n</p>\n<p>\n I believe this is just as important as reading up on tech as not even more important.\n</p>\n<p>\n <em>\n  Remember always build something with the tech you just learned, otherwise, it'll be just another completed tutorial on your pile of completed tutorials.\n </em>\n</p>\n<p>\n Let me know in the comments what was the last thing you've learned and what did you build with it?\n</p>\n",
        "likes": 655,
        "tag": "Social Media"
    },
    {
        "id": "BgNHZv",
        "publisher_pic": "https://res.cloudinary.com/practicaldev/image/fetch/s--lv4bK3fh--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1441/j8ehsrukq7v6bh6tswfc.png",
        "publisher_name": "Sacha Greif",
        "publish_date": "Published on Nov 22",
        "article_banner": "https://res.cloudinary.com/practicaldev/image/fetch/s--cxuKc6w8--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irc6lp31eh4jblvgdu19.png",
        "article_title": "The 2022 State of JavaScript Survey Is Now Open. Here's What's New",
        "article_content": "<p>\n It's hard to imagine today, but back in 2016 the JavaScript ecosystem was often considered overly complex and painful to navigate, with too many competing options and too much confusing hype.\n</p>\n<p>\n Good thing that today we've solved all those issues, and JavaScript is\u2026 What? We haven't? Still confusing 6 years later? Oh right.\n</p>\n<p>\n Well, at least now you know why I started the annual\n <a href=\"https://survey.devographics.com/survey/state-of-js/2022?source=devto_announcement\">\n  State of JavaScript\n </a>\n survey all the way back in 2016, and why as long as new front-end frameworks keep popping up faster than the average\n <code>\n  npm install\n </code>\n run time, the State of JS survey will be there to ask developers about which frameworks, features and librairies they use.\n</p>\n<p>\n In fact, you can\n <a href=\"https://survey.devographics.com/survey/state-of-js/2022?source=devto_announcement\">\n  take this year's survey right now\n </a>\n ! Go ahead, I'll be right here waiting for you. Or, read on to learn more about what's new this year.\n</p>\n<h2>\n <a href=\"#new-name-same-survey\" name=\"new-name-same-survey\">\n </a>\n New Name, Same Survey\n</h2>\n<p>\n You might have noticed that the survey is now hosted at survey.devographics.com. Now that we have not only the State of JavaScript and\n <a href=\"https://stateofcss.com/\">\n  State of CSS\n </a>\n , but also the brand new\n <a href=\"https://stateofgraphql.com/\">\n  State of GraphQL\n </a>\n surveys, we needed a new name to cover all these, and more!\n</p>\n<p>\n So what's\n <a href=\"https://www.devographics.com/\">\n  Devographics\n </a>\n exactly? Is it a company? A non-profit? A dance crew? For now, let's just call it a collective, currently centered around\n <a href=\"https://twitter.com/SachaGreif\">\n  myself\n </a>\n and\n <a href=\"https://twitter.com/ericbureltech\">\n  Eric Burel\n </a>\n , with other members such as\n <a href=\"https://github.com/lex111\">\n  Alexey Pyltsyn\n </a>\n ,\n <a href=\"https://chriskirknielsen.com/\">\n  Chris Kirk-Nielsen\n </a>\n ,\n <a href=\"https://kilianvalkhof.com/\">\n  Kilian Valkhof\n </a>\n , and\n <a href=\"http://lea.verou.me/\">\n  Lea Verou\n </a>\n pitching in when they can.\n</p>\n<p>\n <a href=\"http://2022.stateofgraphql.com/\">\n  <img alt=\"The 2022 State of GraphQL Survey Results\" height=\"560\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--A-_6l6o3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7kwbgymcgg5o666tp9ht.png\" width=\"880\"/>\n </a>\n</p>\n<p>\n <figcaption>\n  The 2022 State of GraphQL Survey Results\n </figcaption>\n</p>\n<h2>\n <a href=\"#no-account-required\" name=\"no-account-required\">\n </a>\n No Account Required\n</h2>\n<p>\n A big complaint about previous surveys was the requirement to sign up for a user account. Good news, you can now take the survey\n <strong>\n  without signing up\n </strong>\n !\n</p>\n<p>\n But there's more: even if you\n <em>\n  do\n </em>\n sign up, we will store a hash of your email address and immediately delete the email itself. This means that you can create an account (for example, in order to access or delete your data in the future), and still remain\n <strong>\n  entirely anonymous\n </strong>\n .\n</p>\n<p>\n <a href=\"https://survey.devographics.com/survey/state-of-js/2022?source=devto_announcement\">\n  <img alt=\"Take the survey anonymously\" height=\"560\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Phzsi99A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/matgalflzfb76f6pnixu.png\" width=\"880\"/>\n </a>\n</p>\n<p>\n <figcaption>\n  Take the survey anonymously\n </figcaption>\n</p>\n<p>\n And even if you sign up to be notified when the survey results come out, we'll forward your email to our newsletter provider and then \u2013you guessed it\u2013 immediately delete it from our own records.\n</p>\n<h2>\n <a href=\"#bye-bye-backend\" name=\"bye-bye-backend\">\n </a>\n Bye Bye Back-End\n</h2>\n<p>\n From the start, the State of JavaScript survey was mostly focused on the front-end, and the Back-end Frameworks section was always a weird mix of static site generators like Gatsby, full-stack frameworks like Meteor, and pure back-end servers like Express.\n</p>\n<p>\n Starting this year, we've removed the back-end section entirely and replaced it with a Rendering Frameworks section.\n</p>\n<p>\n What's a Rendering Framework? Simply put, anything that helps you render and serve an app, whether that's\n <a href=\"https://nextjs.org/\">\n  Next.js\n </a>\n ,\n <a href=\"https://www.11ty.dev/\">\n  Eleventy\n </a>\n , or even something like\n <a href=\"https://docusaurus.io/\">\n  Docusaurus\n </a>\n .\n</p>\n<p>\n <a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3LYHLgLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfj4ear8uih1tfsdw4yn.png\">\n  <img alt=\"Rendering frameworks\" height=\"560\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3LYHLgLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfj4ear8uih1tfsdw4yn.png\" width=\"880\"/>\n </a>\n</p>\n<p>\n <figcaption>\n  Rendering frameworks\n </figcaption>\n</p>\n<p>\n Don't worry though, the back-end frameworks are not completely gone: they still have their own question in the \"Other Tools\" section.\n</p>\n<p>\n And who knows, maybe one day there will be a \"State of Node.js\" survey\u2026\n</p>\n<h2>\n <a href=\"#new-question-type-top-3\" name=\"new-question-type-top-3\">\n </a>\n New Question Type: Top 3\n</h2>\n<p>\n Ranking a list of items isn't as simple as it seems. I'm personally not a fan of drag-and-drop reordering lists, as not only do they take a lot of work to get right, they can also lead to a lot of agonizing over small rank differences that don't end up meaning much when all the data is aggregated.\n</p>\n<p>\n For that reason, last year we introduced our \"tournament bracket\" question type which randomly generates an 8-item bracket and lets you pick the \"winner\" of each match-up. But many respondents pointed out that this often forces you to make unfair choices and eliminate important items right from the start, if you get a bad starting line-up.\n</p>\n<p>\n So this year we're trying something much simpler: just pick your top 3 most important items. Let us know which format you prefer!\n</p>\n<p>\n <a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--VqEjW4HO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr3cd1czmmcdtsujmy7a.png\">\n  <img alt=\"Pick your top 3 pain points\" height=\"560\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--VqEjW4HO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr3cd1czmmcdtsujmy7a.png\" width=\"880\"/>\n </a>\n</p>\n<p>\n <figcaption>\n  Pick your top 3 pain points\n </figcaption>\n</p>\n<h2>\n <a href=\"#application-patterns\" name=\"application-patterns\">\n </a>\n Application Patterns\n</h2>\n<p>\n One new dataset I'm particularly looking forward to analyzing is the \"Application Patterns\" question.\n</p>\n<p>\n <a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5qKqn93R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afzrwix0yuw2nqn8owgd.png\">\n  <img alt=\"Application patterns\" height=\"560\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5qKqn93R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afzrwix0yuw2nqn8owgd.png\" width=\"880\"/>\n </a>\n</p>\n<p>\n <figcaption>\n  Application patterns\n </figcaption>\n</p>\n<p>\n These days it seems there's literally dozens of ways you can choose to architect your JavaScript app, and we tried to reflect that in this question, with the best descriptions we could come up with.\n</p>\n<h2>\n <a href=\"#highlighting-video-creators\" name=\"highlighting-video-creators\">\n </a>\n Highlighting Video Creators\n</h2>\n<p>\n You heard it here first: video is the future. And I think this little site called YouTube has a lot of potential!\n</p>\n<p>\n So it only made sense to (finally) add a Video Creators section to the survey.\n</p>\n<p>\n <a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dl8tP1-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ady9j3nab3j1tchozwuc.png\">\n  <img alt=\"Video creators\" height=\"560\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dl8tP1-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ady9j3nab3j1tchozwuc.png\" width=\"880\"/>\n </a>\n</p>\n<p>\n <figcaption>\n  Video creators\n </figcaption>\n</p>\n<p>\n I already discovered quite a few channels just by researching this question, and I'm looking forward to learning about a lot more!\n</p>\n<h2>\n <a href=\"#take-the-survey\" name=\"take-the-survey\">\n </a>\n Take the Survey\n</h2>\n<p>\n There are a lot of developer surveys, but none of them are focused purely on the JavaScript ecosystem. And given that JavaScript is a language most of us use on a daily basis, it's really important that we get as much data as we can, in order to ensure that the survey results can be relied upon.\n</p>\n<p>\n So if you have a moment,\n <a href=\"https://survey.devographics.com/survey/state-of-js/2022?source=devto_announcement\">\n  take the survey\n </a>\n , and\n <a href=\"This%20year's%20State%20of%20JavaScript%202022%20survey%20is%20now%20open!%20https://survey.devographics.com/survey/state-of-js/2022?source=devto_announcement%20#StateOfJS\">\n  spread the word\n </a>\n if you can!\n</p>\n",
        "likes": 319,
        "tag": "React"
    },
    {
        "id": "jUTBIt",
        "publisher_pic": "https://res.cloudinary.com/practicaldev/image/fetch/s--yfA7I5Jp--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/969076/823600b7-0b5f-4995-bf0d-7da138424290.png",
        "publisher_name": "Fatunbi David Oluwakayode",
        "publish_date": "Published on Nov 18",
        "article_banner": "https://res.cloudinary.com/practicaldev/image/fetch/s--O3hRbdFn--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqg45xyps610t5wef2pj.png",
        "article_title": "What is Rest Api - A beginner's guide",
        "article_content": "<p>\n For many beginners in tech, REST is a foreign concept, sometimes, it's another buzzword in the layers of complex concepts to learn. As a non-computer science graduate myself, i had the same feeling when i was told to consume a REST api my team created in a hackathon.\n</p>\n<p>\n This is why in this article, I aim to explain REST in the simplest language possible.\n</p>\n<ul>\n <li>\n  <a href=\"#what_is_rest\">\n   What REST Api is\n  </a>\n </li>\n <li>\n  <a href=\"#why_rest\">\n   Why REST Api\n  </a>\n </li>\n <li>\n  <a href=\"#rest_principle\">\n   Principles of REST Api\n  </a>\n </li>\n <li>\n  <a href=\"#rest_method\">\n   REST Api methods\n  </a>\n </li>\n</ul>\n<h2>\n <a href=\"#what-is-a-rest-api\" name=\"what-is-a-rest-api\">\n </a>\n What is a REST Api?\n <a name=\"what_is_rest\">\n </a>\n</h2>\n<p>\n Let start by identifying what a REST Api is not.\n</p>\n<ul>\n <li>\n  REST Api is not a protocol.\n </li>\n <li>\n  REST Api is not a standard.\n </li>\n</ul>\n<p>\n Now, that's no longer in the way.\n <em>\n  What is a REST Api?\n </em>\n <br/>\n A REST Api is an application programming interface that conforms to the constraints of the REST architectural style and allows interaction with RESTful web services(web apps based on the REST architecture). As you may already know, REST is the acronym for\n <strong>\n  Representational State Transfer\n </strong>\n . The REST architectural constraints can be implemented in different ways.\n</p>\n<h2>\n <a href=\"#why-rest-api\" name=\"why-rest-api\">\n </a>\n Why REST Api?\n <a name=\"why_rest\">\n </a>\n</h2>\n<p>\n As the saying goes,\n</p>\n<blockquote>\n <p>\n  Necessity is the mother of invention - Plato\n </p>\n</blockquote>\n<p>\n It's important that you understand the purpose of the creation of the REST architectural style.\n <br/>\n Before REST was created, SOAP(Simple Object Access Protocol) was the protocol of choice to facilitate data transfer between application built with different languages and on different platforms.\n</p>\n<blockquote>\n <p>\n  In networking, a protocol is a set of rules for formatting and processing data\n </p>\n</blockquote>\n<p>\n Being a protocol, SOAP imposes some built-in rules that increase it complexity and overhead which sometimes lead to longer load time.\n</p>\n<p>\n As an advantage, SOAP apis are considered to be more secure than REST api as it uses WS-security for transmission along with Secure Socket Layer(SSL) while REST uses SSL and HTTPS (this advantage is still debated in some tech ecosystem) and it was designed to power large enterprise applications.\n</p>\n<p>\n As the internet explosion continues and more smart devices are created, so is the need to make data transmission more seamless. Then came the REST architectural style. It was designed to suit the needs of the modern day technologies like IOT, mobile device etc.\n</p>\n<p>\n Using Rest apis, data transmission can be in several formats (JSON, HTML, XML,or plain text) over HTTP. All communication done via REST api uses HTTP request and requires less bandwidth compare to SOAP.\n</p>\n<h2>\n <a href=\"#principles-of-rest-api\" name=\"principles-of-rest-api\">\n </a>\n Principles of REST Api\n <a name=\"rest_principle\">\n </a>\n</h2>\n<p>\n An application is considered restful if it implements the 6 REST architectural principles which were proposed by computer scientist Roy Fielding.\n</p>\n<ol>\n <li>\n  <p>\n   A RESTful application should have a client-server communication in order to access resources. Usually, the client is a front-end (user-facing) application e.g. a mobile app or a single page application (SPA). The Server is the back-end application which houses the resource. It provides a URL, which is the path  to resource.\n  </p>\n </li>\n <li>\n  <p>\n   A RESTful application should be stateless. Requests sent from a client to the server should contain all the required information to make the server understand the request, no client information is stored between requests and each request is separate and unconnected. HTTP request contains pieces of information such as authorization, caching, cookies etc.\n  </p>\n </li>\n <li>\n  <p>\n   A RESTful application should provide a uniform interface between components such that information is transferred in a standard form. This requires:\n  </p>\n  <ul>\n   <li>\n    Resource identification\n   </li>\n   <li>\n    Resource Manipulation using representations i.e the client can manipulate the resource via the representation they receive because the representation contains enough information to do so.\n   </li>\n   <li>\n    Self-descriptive messages.\n   </li>\n   <li>\n    Hypermedia as the engine of application state i.e the client should be able to use hyperlinks to find all other currently available actions they can take after accessing a resource.\n   </li>\n  </ul>\n </li>\n <li>\n  <p>\n   A RESTful application should provide cacheable data that streamlines client-server interactions.\n  </p>\n </li>\n <li>\n  <p>\n   A RESTful application should provide a layered system that organizes each type of server (those responsible for security, load balancing, etc.) involved in the retrieval of requested information into hierarchies invisible to the client.\n  </p>\n </li>\n <li>\n  <p>\n   Code-on-demand. This is optional. It is the ability to send executable code from the server to the client when requested, extending client functionality.\n  </p>\n </li>\n</ol>\n<h2>\n <a href=\"#rest-api-methods\" name=\"rest-api-methods\">\n </a>\n REST Api Methods\n <a name=\"rest_method\">\n </a>\n</h2>\n<p>\n In HTTP, there are five methods that are commonly used in a REST-based architecture. These methods, as shown in the image below, correspond to CRUD operations.\n</p>\n<p>\n <a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3U8PpfBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgnts432x6az1bk5hvhl.jpg\">\n  <img alt=\"Image description\" height=\"468\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3U8PpfBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgnts432x6az1bk5hvhl.jpg\" width=\"703\"/>\n </a>\n</p>\n<ul>\n <li>\n  <strong>\n   POST\n  </strong>\n  : The POST method is often utilized to\n  <strong>\n   create\n  </strong>\n  new resources.\n </li>\n <li>\n  <strong>\n   GET\n  </strong>\n  : The GET method is used to\n  <strong>\n   read\n  </strong>\n  or retrieve a representation of a resource.\n </li>\n <li>\n  <strong>\n   PUT\n  </strong>\n  : This method is used to\n  <strong>\n   update\n  </strong>\n  a resource. PUT method can also be used to perform a create action if the specified resource is non-existent.\n </li>\n <li>\n  <strong>\n   PATCH\n  </strong>\n  : This method is used to modify(\n  <strong>\n   update\n  </strong>\n  ) resource. This is different from the action performed using the PUT method. The PUT method replaces the specified resources entirely with the new information provided in the request body if the resource exist or creates the resource if not. However, PATCH methods modifies specific components of the resource based on the information provided in the  HTTP request body.\n </li>\n <li>\n  <strong>\n   DELETE\n  </strong>\n  : It is used to\n  <strong>\n   delete\n  </strong>\n  a resource identified by a URI.\n </li>\n</ul>\n<p>\n I hope you are able to get the information you needed. Watch out for my next article. I will be happy to receive your feedback and comments. Thanks for reading.\n</p>\n",
        "likes": 939,
        "tag": "React"
    }
]